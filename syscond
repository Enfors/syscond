#!/bin/sh

CSI="\033["
green="${CSI}32m"
yellow="${CSI}33m"
red="${CSI}31m"
reset="${CSI}0m"

default_dir_mode=755

cd $(dirname $0)
syscond_dir=$(pwd)

check_dir=$syscond_dir/check
report_dir=$syscond_dir/report

master_cond=0
brief_mode=0

Main() {
	arg=$1

	case $arg in
	    check)
		shift
		CommandCheck $*
		;;

	    status)
		shift
		CommandStatus $*
		;;

	    install)
		shift
		CommandInstall $*
		;;

	    "")
		CommandStatus
		;;

	    *)
		ErrorMsg "Unknown command '$*'."
		exit 2
		;;
	esac
}

#
# Check functions
#

CommandCheck() {
    if [ "$#" -ne 1 ]; then
	ErrorMsg "Usage: syscond check day | hour | 15min | 5min | minute | all"
	exit 3
    fi

    dir=$1

    case $dir in
	day)
	    ;;
	hour)
	    ;;
	5min)
	    ;;
	15min)
	    ;;
        minute)
	    ;;
	all)
	    ;;

	*)
	    ErrorMsg "Usage: syscond check day | hour | 15min | 5min | minute | all"
	    exit 4
	    ;;
    esac

    if [ "$dir" = "all" ]; then
	for dir2 in day hour 5min 15min minute; do
	    RunScriptsInDir $dir2
	done
    else
	RunScriptsInDir $dir
    fi
}

RunScriptsInDir() {
    dir=$1

    for file in $check_dir/$dir/*; do
	RunScript $file
    done
}

RunScript() {
    script=$1
    script_filename=$(basename $script) # Filename without the path

    if [ ! -x $script ]; then
	#echo "Ignoring non-executable file $script."
	return 1
    fi

    report_file=$report_dir/$script_filename.report

    nice $script >$report_file.tmp
    mv -f $report_file.tmp $report_file
}

#
# Status functions
#

CommandStatus() {
    master_cond=0

    while getopts ":bBt" opt; do
	case $opt in
	    b)
		brief_mode=1
		;;
	    B)
		brief_mode=1
		very_brief_mode=1
		;;
	    t)
		tmux_colors_mode=1
		CSI=""
		green="#[fg=green]"
		yellow="#[fg=yellow]"
		red="#[fg=red]"
		reset="#[fg=white]"
		;;
	    \?)
		ErrorMsg "Invalid option: -$OPTARG"
		exit 5
		;;
	esac
    done

    VerboseMsg "=== System condition report ==="
    VerboseMsg

    for report_file in $report_dir/*.report; do
	PrintReport $report_file
    done

    master_cond_color=$(QueryCondColor $master_cond)

    VerboseMsg
    if [ -n "$very_brief_mode" ]; then
	echo $(QueryCondColor $master_cond)
    else
	echo "=== Master condition: $master_cond_color ==="
    fi
}

PrintReport() {
    report_file=$1

    if [ -z "$report_file" ]; then
	return 1;
    fi

    if [ ! -f $report_file ]; then
	return 1;
    fi

    report=$(cat $report_file)

    set $report
    
    cond=$1

    if [ $cond -gt $master_cond ]; then
	master_cond=$cond;
    fi

    shift
    text="$*"

    cond_color=$(QueryCondColor $cond)

    if [ $cond -eq 0 ]; then
	VerboseMsg "$cond_color: $text"
    else
	BriefMsg "$cond_color: $text"
    fi
}

QueryCondColor() {
    cond=$1

    case $cond in
	0)
	    echo "${green}GREEN${reset}"
	    ;;
	1)
	    echo "${yellow}YELLOW${reset}"
	    ;;
	2)
	    echo "${red}RED${reset}"
	    ;;
	*)
	    echo "IncorrectCond"
	    ;;
    esac
}

#
# Installation functions
#

CommandInstall() {
    install_dir=$(AskWithDefault "Installation directory" $HOME)
    
    VerifyWritableDir $install_dir

    Msg "Installing in $install_dir..."

    MkDir "$install_dir/syscond"                755
    MkDir "$install_dir/syscond/check"          755
    MkDir "$install_dir/syscond/check/lib"      755
    MkDir "$install_dir/syscond/check/minute"   755
    MkDir "$install_dir/syscond/check/5min"     755
    MkDir "$install_dir/syscond/check/15min"    755
    MkDir "$install_dir/syscond/check/hour"     755
    MkDir "$install_dir/syscond/check/day"      755
    MkDir "$install_dir/syscond/report"         755

    CopyFileToDir syscond "$install_dir/syscond"
    
    for file in check/lib/*; do
	CopyFileToDir $file "$install_dir/syscond/check/lib/"
    done
}

MkDir() {
    if [ $# -ne 2 ]; then
	ErrorMsg "MkDir: Expected two arguments, got '$*'."
	exit 6
    fi

    dir=$1
    mode=$2

    if [ -d "$dir" ]; then
	return 0		# Directory already exists. Do nothing.
    fi

    mkdir -pm $mode $dir

    if [ $? -ne 0 ]; then
	ErrorMsg "MkDir: Failed to create directory '$dir'."
	exit 7
    fi
}

CopyFileToDir() {
    if [ $# -ne 2 ]; then
	ErrorMsg "CopyFileToDir: Expected two arguments, got '$*'."
	exit 8
    fi

    file=$1
    target_dir=$2

    if [ ! -e $file ]; then
	ErrorMsg "CopyFileToDir: File $file doesn't exist."
	exit 9
    fi

    MkDir $target_dir $default_dir_mode

    VerboseMsg "Copying $file to $target_dir"
    cp $file $target_dir

    if [ $? -ne 0 ]; then
	ErrorMsg "CopyFileToDir: Failed to copy '$file' to '$target_dir'."
	exit 10
    fi
}

#
# Utility functions
#

Msg() {
    echo $*
}

VerboseMsg() {
    if [ $brief_mode -eq 1 ]; then
	return 0
    fi

    Msg $*
}

BriefMsg() {
    if [ -z "$very_brief_mode" ]; then
	Msg $*
    fi
}

ErrorMsg() {
    Msg "syscond error: $*" >&2
}

Ask() {
    if [ $# -ne 1 ]; then
	ErrorMsg "Ask: Expected one argument, got '$*'."
	exit 11
    fi

    Msg -n "$1 " >/dev/tty
    
    read answer
    echo $answer
}

AskWithDefault() {
    if [ $# -ne 2 ]; then
	ErrorMsg "AskWithDefault: Expected two arguments, got '$*'."
	exit 12
    fi

    question=$1
    default_answer=$2

    answer=$(Ask "$question [$default_answer]:")

    if [ -z "$answer" ]; then	# If answer is empty
	answer=$default_answer
    fi

    echo $answer
}

VerifyDir() {
    if [ $# -ne 1 ]; then
	ErrorMsg "VerifyDir: Expected one argument, got '$*'."
	exit 12
    fi

    dir=$1

    if [ ! -d $dir ]; then
	ErrorMsg "VerifyDir: '$dir' is not a directory."
	exit 13
    fi
}

VerifyWritableDir() {
    if [ $# -ne 1 ]; then
	ErrorMsg "VerifyWritableDir: Expected one argument, got '$*'."
	exit 14
    fi

    dir=$1

    VerifyDir $dir

    if [ ! -w "$dir" ]; then
	ErrorMsg "VerifyWritableDir: '$dir' is not writable."
	exit 14
    fi
}

cd $(dirname $0)		# cd to where this file is

Main $*
# dummy update
